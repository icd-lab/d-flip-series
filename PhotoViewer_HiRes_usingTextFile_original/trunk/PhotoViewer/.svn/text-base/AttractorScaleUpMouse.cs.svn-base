using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;

namespace PhotoViewer
{
    class AttractorScaleUpMouse : IAttractorSelection
    {
        private readonly Random rand = new Random();
        private readonly RandomBoxMuller randbm = new RandomBoxMuller();
        private int weight_ = 50;

        public void select(AttractorInput input, AttractorWeight weight, List<Photo> photos, List<List<Stroke>> strokes)
        {
            float MinPhotoSize = Browser.MinPhotoScale(input.WindowWidth, input.WindowHeight, Browser.MAXX, Browser.MAXY, photos.Count) * 5;
            float MaxPhotoSize = Browser.MaxPhotoScale(input.WindowWidth, input.WindowHeight, Browser.MAXX, Browser.MAXY, photos.Count) * 2;

            weight_ = weight.ScaleUpMouseWeight;
            // アトラクター選択
            foreach (Photo a in photos)
            {
                float ds = 0; // スケール

                // マウスに重なっているほど大きくしたい
                for (int i = 0; i < input.PointingDevices.Count; i++)
                {
                    if (a.IsGazeds[i])
                    {
                        ds += (MaxPhotoSize - a.Scale) * weight_ * 0.05f;
                        // サイズが最小値以下もしくは最大値以上になるのを防ぐ制約
                        if (a.Scale < MinPhotoSize)
                        {
                            ds += (MinPhotoSize - a.Scale) * weight_ * 0.01f;
                        }
                        else if (a.Scale > MaxPhotoSize)
                        {
                            ds -= (a.Scale - MaxPhotoSize) * weight_ * 0.01f;
                        }
                        // ノイズを付加する
                        if (input.EnabledNoise)
                        {
                            float variance = weight.NoiseWeight * 0.2f;
                            float noise = (float)randbm.NextDouble(variance);
                            ds += noise;
                        }
                    }
                }

                a.AddScale(ds);
            }
        }
    }
}
