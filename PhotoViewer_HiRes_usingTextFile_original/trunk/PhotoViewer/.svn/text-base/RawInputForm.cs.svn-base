using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using PhotoViewer;

namespace RawInput
{
    public partial class RawInputForm : Form
    {
        private List<PointingDevice> pointingDevices_ = new List<PointingDevice>();
        private BoundingBox2D screenBounds_ = new BoundingBox2D();

        public RawInputForm()
        {
            InitializeComponent();

            int size = Marshal.SizeOf(typeof(SRawInputDevice));
            SRawInputDevice[] devices = new SRawInputDevice[1];

            // UsagePage=1,Usage=2 でマウスデバイスを指す
            devices[0].UsagePage = 1;
            devices[0].Usage = 2;

            //WM_INPUT を受け取るウィンドウ
            devices[0].Target = this.Handle;

            //WM_INPUT を有効にするデバイス群，devices の数，RawInputDevice の構造体サイズ
            RegisterRawInputDevices(devices, 1, size);
        }

        // マウスのメッセージをRawInputが受け取るたびにProcessInputKeyを実行
        private void ProcessInputKey(ref Message m)
        {
            const int RidInput = 0x10000003;
            int headerSize = Marshal.SizeOf(typeof(SRawInputHeader));
            int size = Marshal.SizeOf(typeof(SRawInput));

            SRawInput input;
            GetRawInputData(m.LParam, RidInput, out input, ref size, headerSize);
            SRawMouse tempMouse = input.Mouse;

            // 未確認のヘッダを持つデバイスをマウスとして登録
            bool headerFlag = false;
            foreach (PointingDevice pointingDevice in pointingDevices_)
            {
                if (pointingDevice.Header == (int)input.Header.Device)
                {
                    headerFlag = true;
                    break;
                }
            }
            if (headerFlag == false)
            {
                pointingDevices_.Add(new PointingDevice((int)input.Header.Device, PointingDevice.DeviceType.Mouse, new Vector2(Cursor.Position.X, Cursor.Position.Y)));
            }

            // ヘッダが一致するデバイスの情報を更新
            foreach (PointingDevice pointingDevice in pointingDevices_)
            {
                if (pointingDevice.Header == (int)input.Header.Device)
                {
                    // 位置情報の更新
                    Vector2 tempAdded = new Vector2(tempMouse.LastX, tempMouse.LastY);
                    if (screenBounds_.Contains(pointingDevice.Position + tempAdded) == ContainmentType.Contains)
                    {
                        pointingDevice.PositionAdd(tempAdded);
                        Cursor.Position = new System.Drawing.Point((int)pointingDevice.Position.X, (int)pointingDevice.Position.Y);
                    }
                    else if (screenBounds_.Contains(new Vector2(pointingDevice.Position.X + tempAdded.X, pointingDevice.Position.Y)) == ContainmentType.Contains)
                    {
                        pointingDevice.PositionAdd(new Vector2(tempAdded.X, 0f));
                        Cursor.Position = new System.Drawing.Point((int)pointingDevice.Position.X, (int)pointingDevice.Position.Y);
                    }
                    else if (screenBounds_.Contains(new Vector2(pointingDevice.Position.X, pointingDevice.Position.Y + tempAdded.Y)) == ContainmentType.Contains)
                    {
                        pointingDevice.PositionAdd(new Vector2(0f, tempAdded.Y));
                        Cursor.Position = new System.Drawing.Point((int)pointingDevice.Position.X, (int)pointingDevice.Position.Y);
                    }

                    // ボタン情報の更新
                    if (tempMouse.ButtonData != 0)
                    {
                    short tempbd = tempMouse.ButtonData;
                        for (int i = 1024; i > 0; i /= 2)
                        {
                            if (i <= tempbd)
                            {
                                if ((RawMouseButtons)i == RawMouseButtons.LeftDown)
                                {
                                    pointingDevice.LeftButton = Microsoft.Xna.Framework.Input.ButtonState.Pressed;
                                    pointingDevice.LeftDownPosition = pointingDevice.Position;
                                }
                                if ((RawMouseButtons)i == RawMouseButtons.LeftUp)
                                {
                                    pointingDevice.LeftButton = Microsoft.Xna.Framework.Input.ButtonState.Released;
                                }
                                if ((RawMouseButtons)i == RawMouseButtons.RightDown)
                                {
                                    pointingDevice.RightButton = Microsoft.Xna.Framework.Input.ButtonState.Pressed;
                                    pointingDevice.RightDownPosition = pointingDevice.Position;
                                }
                                if ((RawMouseButtons)i == RawMouseButtons.RightUp)
                                {
                                    pointingDevice.RightButton = Microsoft.Xna.Framework.Input.ButtonState.Released;
                                }
                                if ((RawMouseButtons)i == RawMouseButtons.MiddleDown)
                                {
                                    pointingDevice.MiddleButton = Microsoft.Xna.Framework.Input.ButtonState.Pressed;
                                    pointingDevice.MiddleDownPosition = pointingDevice.Position;
                                }
                                if ((RawMouseButtons)i == RawMouseButtons.MiddleUp)
                                {
                                    pointingDevice.MiddleButton = Microsoft.Xna.Framework.Input.ButtonState.Released;
                                }
                                tempbd -= (short)i;
                                if (tempbd == 0)
                                {
                                    break;
                                }
                            }
                        }
                    }

                    // 無入力時間カウンタのリセット
                    pointingDevice.TimeCounterReset();
                }
            }

            // 左ボタンを押したままのRawMouseがカーソルを保持
            // 最初に認識されたRawMouseが優先的にカーソルを保持
            if (pointingDevices_[0].LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
            {
                Cursor.Position = new System.Drawing.Point((int)pointingDevices_[0].Position.X, (int)pointingDevices_[0].Position.Y);
            }
            else
            {
                foreach (PointingDevice pointingDevice in pointingDevices_)
                {
                    if (pointingDevice.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
                    {
                        Cursor.Position = new System.Drawing.Point((int)pointingDevice.Position.X, (int)pointingDevice.Position.Y);
                    }
                }
            }
        }

        // 指定したヘッダのデバイスを削除
        public void RemovePointingDevice(int header)
        {
            PointingDevice removed = null;
            foreach (PointingDevice pointingDevice in pointingDevices_)
            {
                if (pointingDevice.Header == header)
                {
                    removed = pointingDevice;
                    break;
                }
            }
            if (removed != null)
            {
                pointingDevices_.Remove(removed);
            }
        }

        // 受け取ったメッセージがRawInputのものかを確認して送り先を選択
        protected override void WndProc(ref Message m)
        {
            const int WmInput = 0xFF;
            if (m.Msg == WmInput)
            {
                this.ProcessInputKey(ref m);
            }
            else
            {
                base.WndProc(ref m);
            }
        }

        // 生データを扱いやすく処理？
        [DllImport("user32.dll")]
        private static extern int RegisterRawInputDevices(SRawInputDevice[] devices, int number, int size);
        [DllImport("user32.dll")]
        private static extern int GetRawInputData(IntPtr rawInput, int command, out SRawInput data, ref int size, int headerSize);

        #region プロパティ
        public List<PointingDevice> PointingDevices
        {
            get
            {
                return pointingDevices_;
            }
        }
        public BoundingBox2D ScreenBounds
        {
            set
            {
                screenBounds_ = value;
            }
        }
        #endregion
    }
}
