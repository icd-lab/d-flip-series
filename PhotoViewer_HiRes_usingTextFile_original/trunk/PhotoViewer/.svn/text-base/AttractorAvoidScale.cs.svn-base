using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;

namespace PhotoViewer
{
    class AttractorAvoidScale : IAttractorSelection
    {
        private readonly RandomBoxMuller randbm = new RandomBoxMuller();
        private int weight_ = 50;

        public void select(AttractorInput input, AttractorWeight weight, List<Photo> photos, List<List<Stroke>> strokes)
        {
            float MinPhotoSize = Browser.MinPhotoScale(input.WindowWidth, input.WindowHeight, Browser.MAXX, Browser.MAXY, photos.Count);
            //MinPhotoSize = 0f;// movie用
            float MaxPhotoSize = Browser.MaxPhotoScale(input.WindowWidth, input.WindowHeight, Browser.MAXX, Browser.MAXY, photos.Count);

            weight_ = weight.ScaleWeight;

            // 吸引子选择
            foreach (Photo a in photos)
            {
                // 大规模速度
                float ds = 0;

                // 避免重叠的约束
                if (a.Adjacency.Count > 0)
                {
                    foreach (AdjacentPhoto b in a)
                    {
                        // 如果对方小
                        // 为防止重叠，MinPhotoSize会缩小
                        if (b.Photo.Scale < a.Scale)
                        {
                            if (a.IsGazeds.Contains(true) && b.Photo.IsGazeds.Contains(true))
                            {
                                ds -= (a.Scale - MinPhotoSize) * 0.1f * weight_;
                            }
                            else
                            {
                                ds -= (a.Scale - MinPhotoSize) * 0.01f * weight_;
                            }
                        }
                    }
                }

                // 防止MinPhotoSize大于MaxPhotoSize
                if (a.Scale < MinPhotoSize)
                {
                    ds += (MinPhotoSize - a.Scale) * 0.02f * weight_;
                }
                else if (a.Scale > MaxPhotoSize)
                {
                    ds -= (a.Scale - MaxPhotoSize) * 0.02f * weight_;
                }

                // 噪声添加
                if (input.EnabledNoise)
                {
                    float variance = weight.NoiseWeight * 0.2f;
                    float noise = (float)randbm.NextDouble(variance);
                    ds += noise;
                }

                a.AddScale(ds);
            }
        }
    }
}
