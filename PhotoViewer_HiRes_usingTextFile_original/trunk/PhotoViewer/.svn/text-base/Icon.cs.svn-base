using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework;

namespace PhotoViewer
{
    class Icon
    {
        private int iconID_ = -1;
        private bool isOn_ = true;
        private Texture2D texture_ = null;
        private Vector2 position_ = Vector2.Zero;
        private Vector2 velocity_ = Vector2.Zero;
        private float scale_ = 1.0f;
        private float lightScale_ = 1.0f;
        private float lsv_ = 0.0f;
        private int attractor_ = -1;
        private BoundingBox2D boudingBox_ = new BoundingBox2D();
        private Vector2 center_ = Vector2.Zero;

        public Icon(GraphicsDevice device, int iconID, Vector2 position, int attractor)
        {
            iconID_ = iconID;
            position_ = position;
            attractor_ = attractor;
            if (attractor == ControlPanel.ATTRACTOR_GEOGRAPH)
            {
                isOn_ = false;
            }
            this.Load(device);
        }

        public void Load(GraphicsDevice device)
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            if (null == texture_)
            {
                texture_ = Texture2D.FromFile(device, assembly.GetManifestResourceStream("PhotoViewer.icon" + iconID_.ToString() + ".png"));
                center_ = new Vector2(texture_.Width, texture_.Height) * 0.5f;
                boudingBox_ = new BoundingBox2D(position_ - center_, position_ + center_, 0f);
            }
        }

        public void Unload()
        {
            if (texture_ != null)
            {
                texture_.Dispose();
                texture_ = null;
            }
        }

        public void Move()
        {
            position_ += velocity_;
            boudingBox_ = new BoundingBox2D(position_ - center_ * scale_, position_ + center_ * scale_, 0f);
        }
        public void MoveAt(Vector2 tPos)
        {
            position_ = tPos;
            boudingBox_ = new BoundingBox2D(position_ - center_ * scale_, position_ + center_ * scale_, 0f);
        }
        public void ScaleAt(float tScale)
        {
            scale_ = tScale;
            boudingBox_ = new BoundingBox2D(position_ - center_ * scale_, position_ + center_ * scale_, 0f);
        }

        public void Render(SpriteBatch batch, Texture2D texture1)
        {
            if (texture_ != null)
            {
                batch.Draw(texture_, position_, null, Color.White, 0f, center_, scale_, SpriteEffects.None, 0f);
            }
        }
        public void RenderLight(SpriteBatch batch, Texture2D textureLight)
        {
            if (IsOn && textureLight != null)
            {
                float tempWeight = 1f / 256f;
                lsv_ += scale_ - lightScale_;
                tempWeight = 0.2f;
                lsv_ *= tempWeight;
                lightScale_ += lsv_;

                batch.Draw(textureLight, position_, null, Color.White, 0f, center_, lightScale_, SpriteEffects.None, 0f);
            }
            else
            {
                lightScale_ = 0f;
            }
        }
        public void RenderShadow(SpriteBatch batch, Texture2D textureShadow)
        {
            if (textureShadow != null)
            {
                batch.Draw(textureShadow, position_, null, new Color(Color.White, (byte)(159)), 0f, center_ * 0.75f, scale_ * 2f - lightScale_ * 0.7f, SpriteEffects.None, 0f);
            }
        }

        #region プロパティ
        public int IconID
        {
            get
            {
                return iconID_;
            }
        }
        public bool IsOn
        {
            get
            {
                return isOn_;
            }
            set
            {
                isOn_ = value;
            }
        }
        public int Attractor
        {
            get
            {
                return attractor_;
            }
            set
            {
                attractor_ = value;
            }
        }
        public Vector2 Position
        {
            get
            {
                return position_;
            }
        }
        public float Vx
        {
            get
            {
                return velocity_.X;
            }
            set
            {
                velocity_.X = value;
            }
        }
        public float Vy
        {
            get
            {
                return velocity_.Y;
            }
            set
            {
                velocity_.Y = value;
            }
        }
        public BoundingBox2D BoudingBox
        {
            get
            {
                return boudingBox_;
            }
        }
        #endregion
    }
}
